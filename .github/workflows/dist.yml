name: build
on:
  push:
    tags:
      - v[0-9]+.[0-9]+.[0-9]+
  workflow_dispatch:

jobs:
  build:
    name: build
    strategy:
      matrix:
        platform: [macos-latest,ubuntu-latest]
        # python-version: [3.9]
        # platform: [windows-latest]
        # platform: [macos-latest]
    runs-on: ${{ matrix.platform }}
    # https://docs.github.com/zh/actions/using-jobs/using-a-matrix-for-your-jobs#handling-failures
    steps:
      - if: runner.os == 'macOS'
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest-stable
      # - uses: GuillaumeFalourd/setup-rsync@v1.2
      - uses: AnimMouse/setup-rclone@v1
      - uses: actions/checkout@v4
        with:
          lfs: true
      - uses: goto-bus-stop/setup-zig@v2
        # with:
        #   version: 0.11.0
      - name: rust-toolchain
        uses: actions-rs/toolchain@v1.0.6
        with:
            toolchain: nightly
            override: true
            # components: rustfmt, clippy

      - name: prepare
        shell: bash
        env:
          ENC_PASSWD: ${{ secrets.ENC_PASSWD }}
        run: |
          ./sh/initos.sh

      - name: build
        shell: bash
        run: |
          ./sh/cross.sh

      - name: dist
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          ./sh/bin.dist.sh

      # - name: cancel_if_failure
      #   if: failure()
      #   uses: andymckay/cancel-action@0.4

  ver:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: AnimMouse/setup-rclone@v1
      - uses: actions/checkout@v4
        with:
          lfs: true
      - name: ver
        shell: bash
        env:
          ENC_PASSWD: ${{ secrets.ENC_PASSWD }}
        run: |
          ./sh/initos.sh
          ./sh/ver.sh

      # with:
      #   fetch-depth: 1

      # - name: Set up Python ${{ matrix.python-version }}
      #   uses: actions/setup-python@v2
      #   with:
      #     python-version: ${{ matrix.python-version }}
      #
      # - uses: actions/setup-node@v2
      #   with:
      #     node-version: '17.6.0'
      #
      # - name: Get pip cache dir
      #   id: pip-cache
      #   run: |
      #     echo "::set-output name=dir::$(pip cache dir)"
      #
      # - name: pip cache
      #   uses: actions/cache@v2
      #   with:
      #     path: ${{ steps.pip-cache.outputs.dir }}
      #     key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
      #     restore-keys: |
      #       ${{ runner.os }}-pip-
      #
      # # See: https://github.com/actions/cache/blob/main/examples.md#node---yarn
      # - name: Get Yarn cache directory
      #   id: yarn-cache-dir-path
      #   run: echo "::set-output name=dir::$(yarn cache dir)"
      #
      # - name: Use Yarn cache
      #   uses: actions/cache@v2
      #   id: yarn-cache
      #   with:
      #     path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
      #     key: ${{ runner.os }}-yarn-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
      #
      # - name: pip3 install
      #   run: |
      #     pip3 install -r requirements.txt
      #
      # - name: 苹果系统初始化
      #   if: startsWith(matrix.platform, 'macos')
      #   run: |
      #     brew install coreutils
      #
      # - name: build
      #   env:
      #     appleIdPassword: ${{ secrets.APPLEIDPASSWORD }}
      #     appleId: ${{ secrets.APPLEID }}
      #     teamId: ${{ secrets.TEAMID }}
      #     P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      #     KEYCHAIN_PASSWORD: ${{ secrets.P12_PASSWORD }}
      #     PYTHONIOENCODING: utf8
      #     accessKeyId: ${{ secrets.ACCESSKEYID }}
      #     accessKeySecret: ${{ secrets.ACCESSKEYSECRET }}
      #     FEISHU_BOT: ${{ secrets.FEISHU_BOT }}
